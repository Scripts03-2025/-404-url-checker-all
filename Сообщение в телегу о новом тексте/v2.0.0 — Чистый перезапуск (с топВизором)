/**
 * üì® Telegram Notification Script
 * ------------------------------------
 * üìõ –í–µ—Ä—Å–∏—è: v2.0.0 ‚Äî –ß–∏—Å—Ç—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
 *
 * ‚ñ™ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∫–ª–∞–¥–∫—É "404 (–Ω–µ –º–µ–Ω—è—Ç—å!)" –Ω–∞—á–∏–Ω–∞—è —Å 7-–π —Å—Ç—Ä–æ–∫–∏.
 * ‚ñ™ –ï—Å–ª–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ B –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ (http) –∏ –∫–æ–ª–æ–Ω–∫–∞ C –ø—É—Å—Ç–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
 * ‚ñ™ –î–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ:
 *    ‚Äî —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—Å—Ç (B)
 *    ‚Äî –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∞–≤—Ç–æ—Ä–∞ (F)
 *    ‚Äî —Å—Å—ã–ª–∫—É –Ω–∞ TopVisor (G, –µ—Å–ª–∏ –µ—Å—Ç—å)
 * ‚ñ™ –°—Ç–∞–≤–∏—Ç –æ—Ç–º–µ—Ç–∫—É –≤ –∫–æ–ª–æ–Ω–∫–µ C ‚Äî "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <–¥–∞—Ç–∞ –≤—Ä–µ–º—è>"
 * ‚ñ™ –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –≤–æ –≤–∫–ª–∞–¥–∫—É "–õ–æ–≥ —Å–∫—Ä–∏–ø—Ç–æ–≤" –æ—Ç —Å—Ç—Ä–æ–∫–∏ 7, —Å—Ç–æ–ª–±—Ü—ã M‚ÄìQ
 *
 * üí¨ –°–¥–µ–ª–∞–Ω–æ –≤ ChatGPT: https://chatgpt.com/c/67e2e09a-1b20-8010-8992-ecfebfcfe5c0
 */

const TELEGRAM_TOKEN = '8136586676:AAHvXeM4ih9ECPdSwzGM5P0O1p2_GYb_iTk';
const TELEGRAM_CHAT_ID = '8003377702';

function checkNewLinksAndNotify() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('404 (–Ω–µ –º–µ–Ω—è—Ç—å!)');
  const data = sheet.getRange(7, 1, sheet.getLastRow() - 6, 7).getValues(); // A‚ÄìG

  let processedCount = 0;
  let errors = [];

  for (let i = 0; i < data.length; i++) {
    const url = data[i][1]; // –∫–æ–ª–æ–Ω–∫–∞ B
    const status = data[i][2]; // –∫–æ–ª–æ–Ω–∫–∞ C
    const author = data[i][5]; // –∫–æ–ª–æ–Ω–∫–∞ F
    const topvisor = data[i][6]; // –∫–æ–ª–æ–Ω–∫–∞ G

    if (typeof url !== 'string' || !url.includes('http') || status) continue;

    const authorInitial = author ? author.trim().charAt(0).toUpperCase() + '.' : '–ù–µ —É–∫–∞–∑–∞–Ω';

    let message = `üì∞ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–º–µ—â—ë–Ω:
${url}

üë§ –ö—Ç–æ —Ä–∞–∑–º–µ—Å—Ç–∏–ª: ${authorInitial}`;
    if (topvisor && typeof topvisor === 'string' && topvisor.includes('http')) {
      message += `\nüîé TopVisor: ${topvisor}`;
    }

    const result = sendTelegramMessage(message);

    const now = new Date();
    const formatted = Utilities.formatDate(now, Session.getScriptTimeZone(), 'dd.MM.yyyy HH:mm');
    const statusMessage = `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${formatted}`;

    if (result.success) {
      sheet.getRange(i + 7, 3).setValue(statusMessage); // –∫–æ–ª–æ–Ω–∫–∞ C
      processedCount++;
    } else {
      errors.push(result.error);
    }
  }

  logScriptRun(processedCount, errors);
}

function sendTelegramMessage(message) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  const payload = {
    chat_id: TELEGRAM_CHAT_ID,
    text: message,
  };

  const options = {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(payload),
    muteHttpExceptions: true,
  };

  try {
    const response = UrlFetchApp.fetch(url, options);
    const code = response.getResponseCode();
    return code >= 200 && code < 300
      ? { success: true }
      : { success: false, error: `–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ Telegram: ${code}` };
  } catch (e) {
    return { success: false, error: e.message };
  }
}

function logScriptRun(count, errors) {
  const logSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('–õ–æ–≥ —Å–∫—Ä–∏–ø—Ç–æ–≤');
  const now = new Date();
  const date = Utilities.formatDate(now, Session.getScriptTimeZone(), 'dd.MM.yyyy');
  const time = Utilities.formatDate(now, Session.getScriptTimeZone(), 'HH:mm:ss');

  const row = [[
    date,
    time,
    errors.length ? '‚ö†Ô∏è –° –æ—à–∏–±–∫–∞–º–∏' : '‚úÖ –£—Å–ø–µ—à–Ω–æ',
    count ? `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${count}` : 'üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫',
    errors.join('; ')
  ]];

  const last = logSheet.getLastRow();
  if (last >= 7) {
    logSheet.insertRowBefore(7);
  }
  logSheet.getRange(7, 13, 1, row[0].length).setValues(row);
}

function setupTrigger() {
  ScriptApp.newTrigger('checkNewLinksAndNotify').timeBased().everyHours(4).create();
}
